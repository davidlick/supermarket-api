// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/interfaces/ramdb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	ramdb "github.com/davidlick/supermarket-api/pkg/ramdb"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRamDB is a mock of RamDB interface
type MockRamDB struct {
	ctrl     *gomock.Controller
	recorder *MockRamDBMockRecorder
}

// MockRamDBMockRecorder is the mock recorder for MockRamDB
type MockRamDBMockRecorder struct {
	mock *MockRamDB
}

// NewMockRamDB creates a new mock instance
func NewMockRamDB(ctrl *gomock.Controller) *MockRamDB {
	mock := &MockRamDB{ctrl: ctrl}
	mock.recorder = &MockRamDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRamDB) EXPECT() *MockRamDBMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRamDB) Get(column, key string) (*ramdb.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", column, key)
	ret0, _ := ret[0].(*ramdb.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRamDBMockRecorder) Get(column, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRamDB)(nil).Get), column, key)
}

// Select mocks base method
func (m *MockRamDB) Select(column string) ([]*ramdb.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", column)
	ret0, _ := ret[0].([]*ramdb.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select
func (mr *MockRamDBMockRecorder) Select(column interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockRamDB)(nil).Select), column)
}

// Insert mocks base method
func (m *MockRamDB) Insert(r *ramdb.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockRamDBMockRecorder) Insert(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRamDB)(nil).Insert), r)
}

// Delete mocks base method
func (m *MockRamDB) Delete(r *ramdb.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRamDBMockRecorder) Delete(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRamDB)(nil).Delete), r)
}
